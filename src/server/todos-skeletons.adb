--  Todo API
--  Todo API
--
--  The version of the OpenAPI document: 1.0.0
--  Contact: Stephane.Carrez@gmail.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.0.1-2023-08-27.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with OpenAPI.Streams;
with OpenAPI.Servers.Operation;
package body Todos.Skeletons is
   pragma Style_Checks ("-bmrIu");
   pragma Warnings (Off, "*use clause for package*");

   use OpenAPI.Streams;

   Media_List_1 : aliased constant OpenAPI.Mime_List := (
     1 => OpenAPI.Mime_Json);   Media_List_2 : aliased constant OpenAPI.Mime_List := (
     1 => OpenAPI.Mime_Form);

   package body Skeleton is


      package API_Create_Todo is
         new OpenAPI.Servers.Operation
            (Handler => Create_Todo,
             Method  => OpenAPI.Servers.POST,
             URI     => URI_Prefix & "/todos",
             Mimes   => Media_List_1'Access);

      --  Create a todo
      procedure Create_Todo
         (Req     : in out OpenAPI.Servers.Request'Class;
          Reply   : in out OpenAPI.Servers.Response'Class;
          Stream  : in out OpenAPI.Servers.Output_Stream'Class;
          Context : in out OpenAPI.Servers.Context_Type) is
         Impl : Implementation_Type;
         Title : OpenAPI.UString;
         Result : Todos.Models.Todo_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Write_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         OpenAPI.Servers.Get_Parameter (Context, "title", Title);
         Impl.Create_Todo
            (Title, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("successful operation");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 405 then
            Context.Set_Description ("Invalid input");
            return;
         end if;

      end Create_Todo;

      package API_Delete_Todo is
         new OpenAPI.Servers.Operation
            (Handler => Delete_Todo,
             Method  => OpenAPI.Servers.DELETE,
             URI     => URI_Prefix & "/todos/{todoId}",
             Mimes   => null);

      --  Delete the todo
      procedure Delete_Todo
         (Req     : in out OpenAPI.Servers.Request'Class;
          Reply   : in out OpenAPI.Servers.Response'Class;
          Stream  : in out OpenAPI.Servers.Output_Stream'Class;
          Context : in out OpenAPI.Servers.Context_Type) is
         Impl : Implementation_Type;
         Todo_Id : OpenAPI.Long;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Write_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         OpenAPI.Servers.Get_Path_Parameter (Req, 1, Todo_Id);

         Impl.Delete_Todo
            (Todo_Id, Context);

      end Delete_Todo;

      package API_List_Todos is
         new OpenAPI.Servers.Operation
            (Handler => List_Todos,
             Method  => OpenAPI.Servers.GET,
             URI     => URI_Prefix & "/todos",
             Mimes   => Media_List_1'Access);

      --  List the available tasks
      procedure List_Todos
         (Req     : in out OpenAPI.Servers.Request'Class;
          Reply   : in out OpenAPI.Servers.Response'Class;
          Stream  : in out OpenAPI.Servers.Output_Stream'Class;
          Context : in out OpenAPI.Servers.Context_Type) is
         Impl : Implementation_Type;
         Status : OpenAPI.Nullable_UString;
         Result : Todos.Models.Todo_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Read_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         OpenAPI.Servers.Get_Query_Parameter (Req, "status", Status);

         
         Impl.List_Todos
            (Status, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("successful operation");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid status value");
            return;
         end if;

      end List_Todos;

      package API_Redirect_Todos is
         new OpenAPI.Servers.Operation
            (Handler => Redirect_Todos,
             Method  => OpenAPI.Servers.GET,
             URI     => URI_Prefix & "/",
             Mimes   => null);

      --  Redirect to the UI
      procedure Redirect_Todos
         (Req     : in out OpenAPI.Servers.Request'Class;
          Reply   : in out OpenAPI.Servers.Response'Class;
          Stream  : in out OpenAPI.Servers.Output_Stream'Class;
          Context : in out OpenAPI.Servers.Context_Type) is
         Impl : Implementation_Type;
      begin
         
         
         Impl.Redirect_Todos (Context);

      end Redirect_Todos;

      package API_Update_Todo is
         new OpenAPI.Servers.Operation
            (Handler => Update_Todo,
             Method  => OpenAPI.Servers.PUT,
             URI     => URI_Prefix & "/todos/{todoId}",
             Mimes   => Media_List_1'Access);

      --  Update the todo
      procedure Update_Todo
         (Req     : in out OpenAPI.Servers.Request'Class;
          Reply   : in out OpenAPI.Servers.Response'Class;
          Stream  : in out OpenAPI.Servers.Output_Stream'Class;
          Context : in out OpenAPI.Servers.Context_Type) is
         Impl : Implementation_Type;
         Todo_Id : OpenAPI.Long;
         Title : OpenAPI.Nullable_UString;
         Status : OpenAPI.Nullable_UString;
         Result : Todos.Models.Todo_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Write_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         
         
         OpenAPI.Servers.Get_Path_Parameter (Req, 1, Todo_Id);

         OpenAPI.Servers.Get_Parameter (Context, "title", Title);
         OpenAPI.Servers.Get_Parameter (Context, "status", Status);
         Impl.Update_Todo
            (Todo_Id,
             Title,
             Status, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("successful operation");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("The todo does not exist. ");
            return;
         end if;

      end Update_Todo;

      procedure Register (Server : in out OpenAPI.Servers.Application_Type'Class) is
      begin
         OpenAPI.Servers.Register (Server, API_Create_Todo.Definition);
         OpenAPI.Servers.Register (Server, API_Delete_Todo.Definition);
         OpenAPI.Servers.Register (Server, API_List_Todos.Definition);
         OpenAPI.Servers.Register (Server, API_Redirect_Todos.Definition);
         OpenAPI.Servers.Register (Server, API_Update_Todo.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  Create a todo
      procedure Create_Todo
         (Req     : in out OpenAPI.Servers.Request'Class;
          Reply   : in out OpenAPI.Servers.Response'Class;
          Stream  : in out OpenAPI.Servers.Output_Stream'Class;
          Context : in out OpenAPI.Servers.Context_Type) is
         Title : OpenAPI.UString;
         Result : Todos.Models.Todo_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Write_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         OpenAPI.Servers.Get_Parameter (Context, "title", Title);
         Server.Create_Todo
            (Title, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("successful operation");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 405 then
            Context.Set_Description ("Invalid input");
            return;
         end if;

      end Create_Todo;

      package API_Create_Todo is
         new OpenAPI.Servers.Operation
            (Handler => Create_Todo,
             Method  => OpenAPI.Servers.POST,
             URI     => URI_Prefix & "/todos",
             Mimes   => Media_List_1'Access);


      --  Delete the todo
      procedure Delete_Todo
         (Req     : in out OpenAPI.Servers.Request'Class;
          Reply   : in out OpenAPI.Servers.Response'Class;
          Stream  : in out OpenAPI.Servers.Output_Stream'Class;
          Context : in out OpenAPI.Servers.Context_Type) is
         Todo_Id : OpenAPI.Long;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Write_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         OpenAPI.Servers.Get_Path_Parameter (Req, 1, Todo_Id);

         Server.Delete_Todo
            (Todo_Id, Context);

      end Delete_Todo;

      package API_Delete_Todo is
         new OpenAPI.Servers.Operation
            (Handler => Delete_Todo,
             Method  => OpenAPI.Servers.DELETE,
             URI     => URI_Prefix & "/todos/{todoId}",
             Mimes   => null);


      --  List the available tasks
      procedure List_Todos
         (Req     : in out OpenAPI.Servers.Request'Class;
          Reply   : in out OpenAPI.Servers.Response'Class;
          Stream  : in out OpenAPI.Servers.Output_Stream'Class;
          Context : in out OpenAPI.Servers.Context_Type) is
         Status : OpenAPI.Nullable_UString;
         Result : Todos.Models.Todo_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Read_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         OpenAPI.Servers.Get_Query_Parameter (Req, "status", Status);

         
         Server.List_Todos
            (Status, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("successful operation");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Invalid status value");
            return;
         end if;

      end List_Todos;

      package API_List_Todos is
         new OpenAPI.Servers.Operation
            (Handler => List_Todos,
             Method  => OpenAPI.Servers.GET,
             URI     => URI_Prefix & "/todos",
             Mimes   => Media_List_1'Access);


      --  Redirect to the UI
      procedure Redirect_Todos
         (Req     : in out OpenAPI.Servers.Request'Class;
          Reply   : in out OpenAPI.Servers.Response'Class;
          Stream  : in out OpenAPI.Servers.Output_Stream'Class;
          Context : in out OpenAPI.Servers.Context_Type) is
      begin

         
         Server.Redirect_Todos (Context);

      end Redirect_Todos;

      package API_Redirect_Todos is
         new OpenAPI.Servers.Operation
            (Handler => Redirect_Todos,
             Method  => OpenAPI.Servers.GET,
             URI     => URI_Prefix & "/",
             Mimes   => null);


      --  Update the todo
      procedure Update_Todo
         (Req     : in out OpenAPI.Servers.Request'Class;
          Reply   : in out OpenAPI.Servers.Response'Class;
          Stream  : in out OpenAPI.Servers.Output_Stream'Class;
          Context : in out OpenAPI.Servers.Context_Type) is
         Todo_Id : OpenAPI.Long;
         Title : OpenAPI.Nullable_UString;
         Status : OpenAPI.Nullable_UString;
         Result : Todos.Models.Todo_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Write_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;

         
         OpenAPI.Servers.Get_Path_Parameter (Req, 1, Todo_Id);

         OpenAPI.Servers.Get_Parameter (Context, "title", Title);
         OpenAPI.Servers.Get_Parameter (Context, "status", Status);
         Server.Update_Todo
            (Todo_Id,
             Title,
             Status, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("successful operation");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("The todo does not exist. ");
            return;
         end if;

      end Update_Todo;

      package API_Update_Todo is
         new OpenAPI.Servers.Operation
            (Handler => Update_Todo,
             Method  => OpenAPI.Servers.PUT,
             URI     => URI_Prefix & "/todos/{todoId}",
             Mimes   => Media_List_1'Access);


      procedure Register (Server : in out OpenAPI.Servers.Application_Type'Class) is
      begin
         OpenAPI.Servers.Register (Server, API_Create_Todo.Definition);
         OpenAPI.Servers.Register (Server, API_Delete_Todo.Definition);
         OpenAPI.Servers.Register (Server, API_List_Todos.Definition);
         OpenAPI.Servers.Register (Server, API_Redirect_Todos.Definition);
         OpenAPI.Servers.Register (Server, API_Update_Todo.Definition);
      end Register;

      protected body Server is
         --  Create a todo
         procedure Create_Todo
            (Title : in OpenAPI.UString;
             Result : out Todos.Models.Todo_Type;
             Context : in out OpenAPI.Servers.Context_Type) is
         begin
            Impl.Create_Todo
               (Title,
                Result,
                Context);
         end Create_Todo;

         --  Delete the todo
         procedure Delete_Todo
            (Todo_Id : in OpenAPI.Long;
             Context : in out OpenAPI.Servers.Context_Type) is
         begin
            Impl.Delete_Todo
               (Todo_Id,
                Context);
         end Delete_Todo;

         --  List the available tasks
         procedure List_Todos
            (Status : in OpenAPI.Nullable_UString;
             Result : out Todos.Models.Todo_Type_Vectors.Vector;
             Context : in out OpenAPI.Servers.Context_Type) is
         begin
            Impl.List_Todos
               (Status,
                Result,
                Context);
         end List_Todos;

         --  Redirect to the UI
         procedure Redirect_Todos (Context : in out OpenAPI.Servers.Context_Type) is
         begin
            Impl.Redirect_Todos (Context);
         end Redirect_Todos;

         --  Update the todo
         procedure Update_Todo
            (Todo_Id : in OpenAPI.Long;
             Title : in OpenAPI.Nullable_UString;
             Status : in OpenAPI.Nullable_UString;
             Result : out Todos.Models.Todo_Type;
             Context : in out OpenAPI.Servers.Context_Type) is
         begin
            Impl.Update_Todo
               (Todo_Id,
                Title,
                Status,
                Result,
                Context);
         end Update_Todo;

      end Server;

   end Shared_Instance;

end Todos.Skeletons;
