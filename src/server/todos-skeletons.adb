--  Todo API
--  Todo API
--
--  OpenAPI spec version: 1.0.0
--  Contact: Stephane.Carrez@gmail.com
--
--  NOTE: This package is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
--  https://github.com/swagger-api/swagger-codegen.git
--  Do not edit the class manually.
with Swagger.Streams;
with Swagger.Servers.Operation;
package body Todos.Skeletons is

   package body Skeleton is


      package API_Create_Todo is
         new Swagger.Servers.Operation (Handler => Create_Todo,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/todos");

      --  Create a todo
      procedure Create_Todo
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Title : Swagger.UString;
         Result : Todos.Models.Todo_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Write_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Parameter (Context, "title", Title);
         Impl.Create_Todo
            (Title, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Todos.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Todo;

      package API_Delete_Todo is
         new Swagger.Servers.Operation (Handler => Delete_Todo,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => "/todos/{todoId}");

      --  Delete the todo
      procedure Delete_Todo
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Todo_Id : Swagger.Long;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Write_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Todo_Id);
         Impl.Delete_Todo
            (Todo_Id, Context);

      end Delete_Todo;

      package API_List_Todos is
         new Swagger.Servers.Operation (Handler => List_Todos,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/todos");

      --  List the available tasks
      procedure List_Todos
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Status : Swagger.Nullable_UString;
         Result : Todos.Models.Todo_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Read_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "status", Status);
         Impl.List_Todos
            (Status, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Todos.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end List_Todos;

      package API_Update_Todo is
         new Swagger.Servers.Operation (Handler => Update_Todo,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => "/todos/{todoId}");

      --  Update the todo
      procedure Update_Todo
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Todo_Id : Swagger.Long;
         Title : Swagger.Nullable_UString;
         Status : Swagger.Nullable_UString;
         Result : Todos.Models.Todo_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Write_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Todo_Id);
         Swagger.Servers.Get_Parameter (Context, "title", Title);
         Swagger.Servers.Get_Parameter (Context, "status", Status);
         Impl.Update_Todo
            (Todo_Id,
             Title,
             Status, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Todos.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Todo;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Create_Todo.Definition);
         Swagger.Servers.Register (Server, API_Delete_Todo.Definition);
         Swagger.Servers.Register (Server, API_List_Todos.Definition);
         Swagger.Servers.Register (Server, API_Update_Todo.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  Create a todo
      procedure Create_Todo
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Title : Swagger.UString;
         Result : Todos.Models.Todo_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Write_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Parameter (Context, "title", Title);
         Server.Create_Todo
            (Title, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Todos.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Todo;

      package API_Create_Todo is
         new Swagger.Servers.Operation (Handler => Create_Todo,
                                        Method  => Swagger.Servers.POST,
                                        URI     => "/todos");

      --  Delete the todo
      procedure Delete_Todo
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Todo_Id : Swagger.Long;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Write_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Todo_Id);
         Server.Delete_Todo
            (Todo_Id, Context);

      end Delete_Todo;

      package API_Delete_Todo is
         new Swagger.Servers.Operation (Handler => Delete_Todo,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => "/todos/{todoId}");

      --  List the available tasks
      procedure List_Todos
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Status : Swagger.Nullable_UString;
         Result : Todos.Models.Todo_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Read_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "status", Status);
         Server.List_Todos
            (Status, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Todos.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end List_Todos;

      package API_List_Todos is
         new Swagger.Servers.Operation (Handler => List_Todos,
                                        Method  => Swagger.Servers.GET,
                                        URI     => "/todos");

      --  Update the todo
      procedure Update_Todo
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Todo_Id : Swagger.Long;
         Title : Swagger.Nullable_UString;
         Status : Swagger.Nullable_UString;
         Result : Todos.Models.Todo_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Write_Todo.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Todo_Id);
         Swagger.Servers.Get_Parameter (Context, "title", Title);
         Swagger.Servers.Get_Parameter (Context, "status", Status);
         Server.Update_Todo
            (Todo_Id,
             Title,
             Status, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Todos.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Todo;

      package API_Update_Todo is
         new Swagger.Servers.Operation (Handler => Update_Todo,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => "/todos/{todoId}");

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Create_Todo.Definition);
         Swagger.Servers.Register (Server, API_Delete_Todo.Definition);
         Swagger.Servers.Register (Server, API_List_Todos.Definition);
         Swagger.Servers.Register (Server, API_Update_Todo.Definition);
      end Register;

      protected body Server is
         --  Create a todo
         procedure Create_Todo
            (Title : in Swagger.UString;
             Result : out Todos.Models.Todo_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Todo
               (Title,
                Result,
                Context);
         end Create_Todo;

         --  Delete the todo
         procedure Delete_Todo
            (Todo_Id : in Swagger.Long;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Todo
               (Todo_Id,
                Context);
         end Delete_Todo;

         --  List the available tasks
         procedure List_Todos
            (Status : in Swagger.Nullable_UString;
             Result : out Todos.Models.Todo_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.List_Todos
               (Status,
                Result,
                Context);
         end List_Todos;

         --  Update the todo
         procedure Update_Todo
            (Todo_Id : in Swagger.Long;
             Title : in Swagger.Nullable_UString;
             Status : in Swagger.Nullable_UString;
             Result : out Todos.Models.Todo_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Todo
               (Todo_Id,
                Title,
                Status,
                Result,
                Context);
         end Update_Todo;

      end Server;

   end Shared_Instance;

end Todos.Skeletons;
